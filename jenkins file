pipeline {
    agent any
    
    environment {
        // Define environment variables
        GITHUB_TOKEN = credentials('github-access-token')
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_DEFAULT_REGION = 'ap-south-1' 
        ECR_REPO_URL = '579165099199.dkr.ecr.ap-south-1.amazonaws.com' //<aws_account_id>.dkr.ecr.<region>.amazonaws.com/<repository_name> this is url pattern 
        DOCKER_IMAGE = 'lenovo'
        DOCKER_IMAGE_VERSION = "${DOCKER_IMAGE}:${BUILD_NUMBER}" // Adding build number to the Docker image version
        NAMESPACE = 'default' 
        SERVICE_NAME = 'my-load-balancer'
        EKS_CLUSTER_NAME = 'w3cluster'
        EXTERNAL_PORT = 80 // External port for the load balancer
        INTERNAL_PORT = 80 // Internal port your application listens on
        //KUBECONFIG = credentials('kubeconfig_file') // your Kubernetes configuration file
    }
    
    stages {
        stage('Clone') {
            steps {
                // Clone your source code from version control system
                git branch: 'jenkins', url: 'https://github.com/mohitgaur1272/deployment_k8s_jenkins.git'
            }
        }
        
        stage('Build') {
            steps {
                // Build your Docker image
                //sh "docker buildx install"
                //sh "export DOCKER_BUILDKIT=1"
                sh "docker build -t $DOCKER_IMAGE_VERSION ."
            }
        }
        stage('Check') {
            steps {
                sh 'docker images'
            }
        }
        stage('Push to ECR') {
            steps {
                // Authenticate with ECR
                sh "aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL"
                
                // Push your Docker image to ECR
                sh "docker tag $DOCKER_IMAGE_VERSION $ECR_REPO_URL/$DOCKER_IMAGE_VERSION"
                sh "docker push $ECR_REPO_URL/$DOCKER_IMAGE_VERSION"
                
                // Delete the local Docker image
                sh "docker rmi $DOCKER_IMAGE_VERSION"
            }
        }
        
        stage('Pull from ECR') {
            steps {
                // Pull the Docker image from ECR
                sh "docker pull $ECR_REPO_URL/$DOCKER_IMAGE_VERSION"
            }
        }

        stage('add kubeconfig to jenkins') {
            steps {
                // add kubeconfig file for jenkins
                    sh " aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME"
                }
            }
        }

        stage('apply deployment file') {
            steps {
                // Deploy your application to Kubernetes cluster
                     sh "kubectl apply -f deployment.yaml--namespace=$NAMESPACE"
                // after then manually apply your other yaml file for one time 
                }
            }
        }

        stage('image set'){
            steps {
                //change image in deployment for container 
                    sh "kubectl set image deployment/ekor-deployment ekor-deployment=$ECR_REPO_URL/$DOCKER_IMAGE_VERSION"
                }
            }
        } 
    }
}
